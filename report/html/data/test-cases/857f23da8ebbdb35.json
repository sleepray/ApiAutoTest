{
  "uid" : "857f23da8ebbdb35",
  "name" : "指标统计",
  "fullName" : "test.test_api#test_main",
  "historyId" : "b2f97f7f0729796a83f8af9c30f43250",
  "time" : {
    "start" : 1642130430565,
    "stop" : 1642130430568,
    "duration" : 3
  },
  "status" : "broken",
  "statusMessage" : "  File \"<string>\", line 1\n    {\"ip\":\"${iptoint(\"${ip}\")}\", \"serviceName\":\"${servicename}\", \"port\":\"${port}\", \"infoType\":4}\n                      ^\nSyntaxError: invalid syntax",
  "statusTrace" : "dict_str = '{\"ip\":\"${iptoint(\"${ip}\")}\", \"serviceName\":\"${servicename}\", \"port\":\"${port}\", \"infoType\":4}'\n\n    def convert_json(dict_str: str) -> dict:\n        \"\"\"\n        :param dict_str: 长得像字典的字符串\n        return json格式的内容\n        \"\"\"\n        try:\n            if 'None' in dict_str:\n                dict_str = dict_str.replace('None', 'null')\n            elif 'True' in dict_str:\n                dict_str = dict_str.replace('True', 'true')\n            elif 'False' in dict_str:\n                dict_str = dict_str.replace('False', 'false')\n>           dict_str = json.loads(dict_str)\n\ntools\\__init__.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = '{\"ip\":\"${iptoint(\"${ip}\")}\", \"serviceName\":\"${servicename}\", \"port\":\"${port}\", \"infoType\":4}'\ncls = None, object_hook = None, parse_float = None, parse_int = None\nparse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\nE:\\python3.9.6\\lib\\json\\__init__.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x00000183E4BCE6A0>\ns = '{\"ip\":\"${iptoint(\"${ip}\")}\", \"serviceName\":\"${servicename}\", \"port\":\"${port}\", \"infoType\":4}'\n_w = <built-in method match of re.Pattern object at 0x00000183E47420F0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\nE:\\python3.9.6\\lib\\json\\decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x00000183E4BCE6A0>\ns = '{\"ip\":\"${iptoint(\"${ip}\")}\", \"serviceName\":\"${servicename}\", \"port\":\"${port}\", \"infoType\":4}'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           json.decoder.JSONDecodeError: Expecting ',' delimiter: line 1 column 19 (char 18)\n\nE:\\python3.9.6\\lib\\json\\decoder.py:353: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['c55', '指标统计', '{\"Authorization\": \"${token}\"}', 'statusStat/StatCount', 'get', 'params', ...]\n\n    @pytest.mark.flaky(reruns=None, reruns_delay=1) #pytest 失败重跑装饰器\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n>       response, response_code, expect, sql, check_mode = BaseRequest.send_request(cases, env = 'dev')\n\ntest\\test_api.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\napi\\base_requests.py:45: in send_request\n    data = DataProcess.handle_data(data)\ntools\\data_process.py:73: in handle_data\n    variable = convert_json(data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndict_str = '{\"ip\":\"${iptoint(\"${ip}\")}\", \"serviceName\":\"${servicename}\", \"port\":\"${port}\", \"infoType\":4}'\n\n    def convert_json(dict_str: str) -> dict:\n        \"\"\"\n        :param dict_str: 长得像字典的字符串\n        return json格式的内容\n        \"\"\"\n        try:\n            if 'None' in dict_str:\n                dict_str = dict_str.replace('None', 'null')\n            elif 'True' in dict_str:\n                dict_str = dict_str.replace('True', 'true')\n            elif 'False' in dict_str:\n                dict_str = dict_str.replace('False', 'false')\n            dict_str = json.loads(dict_str)\n        except Exception as e:\n            if 'null' in dict_str:\n                dict_str = dict_str.replace('null', 'None')\n            elif 'true' in dict_str:\n                dict_str = dict_str.replace('true', 'True')\n            elif 'false' in dict_str:\n                dict_str = dict_str.replace('false', 'False')\n>           dict_str = eval(dict_str)\nE             File \"<string>\", line 1\nE               {\"ip\":\"${iptoint(\"${ip}\")}\", \"serviceName\":\"${servicename}\", \"port\":\"${port}\", \"infoType\":4}\nE                                 ^\nE           SyntaxError: invalid syntax\n\ntools\\__init__.py:83: SyntaxError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "cases",
    "time" : {
      "start" : 1642130430565,
      "stop" : 1642130430565,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "  File \"<string>\", line 1\n    {\"ip\":\"${iptoint(\"${ip}\")}\", \"serviceName\":\"${servicename}\", \"port\":\"${port}\", \"infoType\":4}\n                      ^\nSyntaxError: invalid syntax",
    "statusTrace" : "dict_str = '{\"ip\":\"${iptoint(\"${ip}\")}\", \"serviceName\":\"${servicename}\", \"port\":\"${port}\", \"infoType\":4}'\n\n    def convert_json(dict_str: str) -> dict:\n        \"\"\"\n        :param dict_str: 长得像字典的字符串\n        return json格式的内容\n        \"\"\"\n        try:\n            if 'None' in dict_str:\n                dict_str = dict_str.replace('None', 'null')\n            elif 'True' in dict_str:\n                dict_str = dict_str.replace('True', 'true')\n            elif 'False' in dict_str:\n                dict_str = dict_str.replace('False', 'false')\n>           dict_str = json.loads(dict_str)\n\ntools\\__init__.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = '{\"ip\":\"${iptoint(\"${ip}\")}\", \"serviceName\":\"${servicename}\", \"port\":\"${port}\", \"infoType\":4}'\ncls = None, object_hook = None, parse_float = None, parse_int = None\nparse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\nE:\\python3.9.6\\lib\\json\\__init__.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x00000183E4BCE6A0>\ns = '{\"ip\":\"${iptoint(\"${ip}\")}\", \"serviceName\":\"${servicename}\", \"port\":\"${port}\", \"infoType\":4}'\n_w = <built-in method match of re.Pattern object at 0x00000183E47420F0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\nE:\\python3.9.6\\lib\\json\\decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x00000183E4BCE6A0>\ns = '{\"ip\":\"${iptoint(\"${ip}\")}\", \"serviceName\":\"${servicename}\", \"port\":\"${port}\", \"infoType\":4}'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           json.decoder.JSONDecodeError: Expecting ',' delimiter: line 1 column 19 (char 18)\n\nE:\\python3.9.6\\lib\\json\\decoder.py:353: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['c55', '指标统计', '{\"Authorization\": \"${token}\"}', 'statusStat/StatCount', 'get', 'params', ...]\n\n    @pytest.mark.flaky(reruns=None, reruns_delay=1) #pytest 失败重跑装饰器\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n>       response, response_code, expect, sql, check_mode = BaseRequest.send_request(cases, env = 'dev')\n\ntest\\test_api.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\napi\\base_requests.py:45: in send_request\n    data = DataProcess.handle_data(data)\ntools\\data_process.py:73: in handle_data\n    variable = convert_json(data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndict_str = '{\"ip\":\"${iptoint(\"${ip}\")}\", \"serviceName\":\"${servicename}\", \"port\":\"${port}\", \"infoType\":4}'\n\n    def convert_json(dict_str: str) -> dict:\n        \"\"\"\n        :param dict_str: 长得像字典的字符串\n        return json格式的内容\n        \"\"\"\n        try:\n            if 'None' in dict_str:\n                dict_str = dict_str.replace('None', 'null')\n            elif 'True' in dict_str:\n                dict_str = dict_str.replace('True', 'true')\n            elif 'False' in dict_str:\n                dict_str = dict_str.replace('False', 'false')\n            dict_str = json.loads(dict_str)\n        except Exception as e:\n            if 'null' in dict_str:\n                dict_str = dict_str.replace('null', 'None')\n            elif 'true' in dict_str:\n                dict_str = dict_str.replace('true', 'True')\n            elif 'false' in dict_str:\n                dict_str = dict_str.replace('false', 'False')\n>           dict_str = eval(dict_str)\nE             File \"<string>\", line 1\nE               {\"ip\":\"${iptoint(\"${ip}\")}\", \"serviceName\":\"${servicename}\", \"port\":\"${port}\", \"infoType\":4}\nE                                 ^\nE           SyntaxError: invalid syntax\n\ntools\\__init__.py:83: SyntaxError",
    "steps" : [ {
      "name" : "请求地址: http://192.168.5.120:8080/backend/statusStat/StatCount",
      "time" : {
        "start" : 1642130430566,
        "stop" : 1642130430566,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "请求头",
      "time" : {
        "start" : 1642130430566,
        "stop" : 1642130430567,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "ff05e30fe421ae50",
        "name" : "请求头",
        "source" : "ff05e30fe421ae50.json",
        "type" : "application/json",
        "size" : 253
      } ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 1,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "3d9f8a940da35d73",
      "name" : "stderr",
      "source" : "3d9f8a940da35d73.txt",
      "type" : "text/plain",
      "size" : 1478
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 2,
    "stepsCount" : 2,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "flaky(reruns=None, reruns_delay=1)"
  }, {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "host",
    "value" : "DESKTOP-BNVFIE4"
  }, {
    "name" : "thread",
    "value" : "20868-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "cases",
    "value" : "['c55', '指标统计', '{\"Authorization\": \"${token}\"}', 'statusStat/StatCount', 'get', 'params', '', '', '{\"ip\":\"${iptoint(\"${ip}\")}\", \"serviceName\":\"${servicename}\", \"port\":\"${port}\", \"infoType\":4}', '', '', '{\"$.code\": 0}']"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "flaky(reruns=None, reruns_delay=1)" ]
  },
  "source" : "857f23da8ebbdb35.json",
  "parameterValues" : [ "['c55', '指标统计', '{\"Authorization\": \"${token}\"}', 'statusStat/StatCount', 'get', 'params', '', '', '{\"ip\":\"${iptoint(\"${ip}\")}\", \"serviceName\":\"${servicename}\", \"port\":\"${port}\", \"infoType\":4}', '', '', '{\"$.code\": 0}']" ]
}