{
  "uid" : "fa96e83df2593a4d",
  "name" : "查询设备列表",
  "fullName" : "test.test_api#test_main",
  "historyId" : "ee88be9148a730617b573ca871d38066",
  "time" : {
    "start" : 1648882063411,
    "stop" : 1648882063584,
    "duration" : 173
  },
  "status" : "broken",
  "statusMessage" : "  File \"<string>\", line 1\n    {\"devsid\":\"$.data.list[?(@.secretkey=='\"${secretkey}\"')].deviceId\",\"devid\":\"$.data.list[?(@.secretkey=='\"${secretkey}\"')].id\"}\n                                            ^\nSyntaxError: invalid syntax",
  "statusTrace" : "dict_str = '{\"devsid\":\"$.data.list[?(@.secretkey==\\'\"${secretkey}\"\\')].deviceId\",\"devid\":\"$.data.list[?(@.secretkey==\\'\"${secretkey}\"\\')].id\"}'\n\n    def convert_json(dict_str: str) -> dict:\n        \"\"\"\n        :param dict_str: 长得像字典的字符串\n        return json格式的内容\n        \"\"\"\n        try:\n            if 'None' in dict_str:\n                dict_str = dict_str.replace('None', 'null')\n            elif 'True' in dict_str:\n                dict_str = dict_str.replace('True', 'true')\n            elif 'False' in dict_str:\n                dict_str = dict_str.replace('False', 'false')\n>           dict_str = json.loads(dict_str)\n\ntools\\__init__.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = '{\"devsid\":\"$.data.list[?(@.secretkey==\\'\"${secretkey}\"\\')].deviceId\",\"devid\":\"$.data.list[?(@.secretkey==\\'\"${secretkey}\"\\')].id\"}'\ncls = None, object_hook = None, parse_float = None, parse_int = None\nparse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\nE:\\python3.9.6\\lib\\json\\__init__.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000002570980ADC0>\ns = '{\"devsid\":\"$.data.list[?(@.secretkey==\\'\"${secretkey}\"\\')].deviceId\",\"devid\":\"$.data.list[?(@.secretkey==\\'\"${secretkey}\"\\')].id\"}'\n_w = <built-in method match of re.Pattern object at 0x0000025709772F30>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\nE:\\python3.9.6\\lib\\json\\decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000002570980ADC0>\ns = '{\"devsid\":\"$.data.list[?(@.secretkey==\\'\"${secretkey}\"\\')].deviceId\",\"devid\":\"$.data.list[?(@.secretkey==\\'\"${secretkey}\"\\')].id\"}'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           json.decoder.JSONDecodeError: Expecting ',' delimiter: line 1 column 41 (char 40)\n\nE:\\python3.9.6\\lib\\json\\decoder.py:353: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['c24', '查询设备列表', '{\"Authorization\": \"${token}\"}', 'device/list?', 'get', 'json', ...]\n\n    @pytest.mark.flaky(reruns=None, reruns_delay=1) #pytest 失败重跑装饰器\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n>       response, response_code, expect, sql, check_mode = BaseRequest.send_request(cases, env = 'dev')\n\ntest\\test_api.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\napi\\base_requests.py:51: in send_request\n    DataProcess.handle_extra(extra, response)\ntools\\data_process.py:110: in handle_extra\n    extra_dict = convert_json(extra_str)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndict_str = '{\"devsid\":\"$.data.list[?(@.secretkey==\\'\"${secretkey}\"\\')].deviceId\",\"devid\":\"$.data.list[?(@.secretkey==\\'\"${secretkey}\"\\')].id\"}'\n\n    def convert_json(dict_str: str) -> dict:\n        \"\"\"\n        :param dict_str: 长得像字典的字符串\n        return json格式的内容\n        \"\"\"\n        try:\n            if 'None' in dict_str:\n                dict_str = dict_str.replace('None', 'null')\n            elif 'True' in dict_str:\n                dict_str = dict_str.replace('True', 'true')\n            elif 'False' in dict_str:\n                dict_str = dict_str.replace('False', 'false')\n            dict_str = json.loads(dict_str)\n        except Exception as e:\n            if 'null' in dict_str:\n                dict_str = dict_str.replace('null', 'None')\n            elif 'true' in dict_str:\n                dict_str = dict_str.replace('true', 'True')\n            elif 'false' in dict_str:\n                dict_str = dict_str.replace('false', 'False')\n>           dict_str = eval(dict_str)\nE             File \"<string>\", line 1\nE               {\"devsid\":\"$.data.list[?(@.secretkey=='\"${secretkey}\"')].deviceId\",\"devid\":\"$.data.list[?(@.secretkey=='\"${secretkey}\"')].id\"}\nE                                                       ^\nE           SyntaxError: invalid syntax\n\ntools\\__init__.py:84: SyntaxError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "cases",
    "time" : {
      "start" : 1648882063411,
      "stop" : 1648882063411,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "  File \"<string>\", line 1\n    {\"devsid\":\"$.data.list[?(@.secretkey=='\"${secretkey}\"')].deviceId\",\"devid\":\"$.data.list[?(@.secretkey=='\"${secretkey}\"')].id\"}\n                                            ^\nSyntaxError: invalid syntax",
    "statusTrace" : "dict_str = '{\"devsid\":\"$.data.list[?(@.secretkey==\\'\"${secretkey}\"\\')].deviceId\",\"devid\":\"$.data.list[?(@.secretkey==\\'\"${secretkey}\"\\')].id\"}'\n\n    def convert_json(dict_str: str) -> dict:\n        \"\"\"\n        :param dict_str: 长得像字典的字符串\n        return json格式的内容\n        \"\"\"\n        try:\n            if 'None' in dict_str:\n                dict_str = dict_str.replace('None', 'null')\n            elif 'True' in dict_str:\n                dict_str = dict_str.replace('True', 'true')\n            elif 'False' in dict_str:\n                dict_str = dict_str.replace('False', 'false')\n>           dict_str = json.loads(dict_str)\n\ntools\\__init__.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = '{\"devsid\":\"$.data.list[?(@.secretkey==\\'\"${secretkey}\"\\')].deviceId\",\"devid\":\"$.data.list[?(@.secretkey==\\'\"${secretkey}\"\\')].id\"}'\ncls = None, object_hook = None, parse_float = None, parse_int = None\nparse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\nE:\\python3.9.6\\lib\\json\\__init__.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000002570980ADC0>\ns = '{\"devsid\":\"$.data.list[?(@.secretkey==\\'\"${secretkey}\"\\')].deviceId\",\"devid\":\"$.data.list[?(@.secretkey==\\'\"${secretkey}\"\\')].id\"}'\n_w = <built-in method match of re.Pattern object at 0x0000025709772F30>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\nE:\\python3.9.6\\lib\\json\\decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000002570980ADC0>\ns = '{\"devsid\":\"$.data.list[?(@.secretkey==\\'\"${secretkey}\"\\')].deviceId\",\"devid\":\"$.data.list[?(@.secretkey==\\'\"${secretkey}\"\\')].id\"}'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           json.decoder.JSONDecodeError: Expecting ',' delimiter: line 1 column 41 (char 40)\n\nE:\\python3.9.6\\lib\\json\\decoder.py:353: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['c24', '查询设备列表', '{\"Authorization\": \"${token}\"}', 'device/list?', 'get', 'json', ...]\n\n    @pytest.mark.flaky(reruns=None, reruns_delay=1) #pytest 失败重跑装饰器\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n>       response, response_code, expect, sql, check_mode = BaseRequest.send_request(cases, env = 'dev')\n\ntest\\test_api.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\napi\\base_requests.py:51: in send_request\n    DataProcess.handle_extra(extra, response)\ntools\\data_process.py:110: in handle_extra\n    extra_dict = convert_json(extra_str)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndict_str = '{\"devsid\":\"$.data.list[?(@.secretkey==\\'\"${secretkey}\"\\')].deviceId\",\"devid\":\"$.data.list[?(@.secretkey==\\'\"${secretkey}\"\\')].id\"}'\n\n    def convert_json(dict_str: str) -> dict:\n        \"\"\"\n        :param dict_str: 长得像字典的字符串\n        return json格式的内容\n        \"\"\"\n        try:\n            if 'None' in dict_str:\n                dict_str = dict_str.replace('None', 'null')\n            elif 'True' in dict_str:\n                dict_str = dict_str.replace('True', 'true')\n            elif 'False' in dict_str:\n                dict_str = dict_str.replace('False', 'false')\n            dict_str = json.loads(dict_str)\n        except Exception as e:\n            if 'null' in dict_str:\n                dict_str = dict_str.replace('null', 'None')\n            elif 'true' in dict_str:\n                dict_str = dict_str.replace('true', 'True')\n            elif 'false' in dict_str:\n                dict_str = dict_str.replace('false', 'False')\n>           dict_str = eval(dict_str)\nE             File \"<string>\", line 1\nE               {\"devsid\":\"$.data.list[?(@.secretkey=='\"${secretkey}\"')].deviceId\",\"devid\":\"$.data.list[?(@.secretkey=='\"${secretkey}\"')].id\"}\nE                                                       ^\nE           SyntaxError: invalid syntax\n\ntools\\__init__.py:84: SyntaxError",
    "steps" : [ {
      "name" : "请求地址: http://192.168.0.6/api/device/list?",
      "time" : {
        "start" : 1648882063426,
        "stop" : 1648882063426,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "请求头",
      "time" : {
        "start" : 1648882063426,
        "stop" : 1648882063426,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "5e2ec88f74481f87",
        "name" : "请求头",
        "source" : "5e2ec88f74481f87.json",
        "type" : "application/json",
        "size" : 253
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false
    }, {
      "name" : "请求数据",
      "time" : {
        "start" : 1648882063426,
        "stop" : 1648882063426,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "d3cdd927430c22d6",
        "name" : "请求数据",
        "source" : "d3cdd927430c22d6.json",
        "type" : "application/json",
        "size" : 4
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false
    }, {
      "name" : "响应耗时(s): 0.168931",
      "time" : {
        "start" : 1648882063584,
        "stop" : 1648882063584,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "响应结果",
      "time" : {
        "start" : 1648882063584,
        "stop" : 1648882063584,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "a9ca663e9676eb4b",
        "name" : "响应结果",
        "source" : "a9ca663e9676eb4b.json",
        "type" : "application/json",
        "size" : 1952
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 5,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "flaky(reruns=None, reruns_delay=1)"
  }, {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "host",
    "value" : "DESKTOP-BNVFIE4"
  }, {
    "name" : "thread",
    "value" : "13328-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "cases",
    "value" : "['c24', '查询设备列表', '{\"Authorization\": \"${token}\"}', 'device/list?', 'get', 'json', '', 'check_code', '', '{\"devsid\":\"$.data.list[?(@.secretkey==\\'\"${secretkey}\"\\')].deviceId\",\"devid\":\"$.data.list[?(@.secretkey==\\'\"${secretkey}\"\\')].id\"}', '', 200.0]"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "flaky(reruns=None, reruns_delay=1)" ]
  },
  "source" : "fa96e83df2593a4d.json",
  "parameterValues" : [ "['c24', '查询设备列表', '{\"Authorization\": \"${token}\"}', 'device/list?', 'get', 'json', '', 'check_code', '', '{\"devsid\":\"$.data.list[?(@.secretkey==\\'\"${secretkey}\"\\')].deviceId\",\"devid\":\"$.data.list[?(@.secretkey==\\'\"${secretkey}\"\\')].id\"}', '', 200.0]" ]
}