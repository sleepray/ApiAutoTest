{
  "uid" : "35e075248efd27a8",
  "name" : "服务配置编辑-global",
  "fullName" : "test.test_api#test_main",
  "historyId" : "66320b00f18e086f6cd0818656321728",
  "time" : {
    "start" : 1642130430308,
    "stop" : 1642130430313,
    "duration" : 5
  },
  "status" : "broken",
  "statusMessage" : "AttributeError: 'dict' object has no attribute 'json'",
  "statusTrace" : "cases = ['c37', '服务配置编辑-global', '{\"Authorization\": \"${token}\"}', 'config/service/update', 'post', 'json', ...]\n\n    @pytest.mark.flaky(reruns=None, reruns_delay=1) #pytest 失败重跑装饰器\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n>       response, response_code, expect, sql, check_mode = BaseRequest.send_request(cases, env = 'dev')\n\ntest\\test_api.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\napi\\base_requests.py:49: in send_request\n    response, response_code = cls.send_api(url, method, parametric_key, check_mode, header, data, file)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'api.base_requests.BaseRequest'>\nurl = 'http://192.168.5.120:8080/backend/config/service/update', method = 'post'\nparametric_key = 'json', check_mode = ''\nheader = {'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'zh-CN,zh;q=0.9', 'Authorization': '${token}', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36'}\ndata = {'configContent': [{'id': '1642130430', 'key': 'key1', 'value': 'value2'}], 'configType': 'global'}\nfile = None\n\n    @classmethod\n    def send_api(\n            cls,\n            url,\n            method,\n            parametric_key,\n            check_mode,\n            header=None,\n            data=None,\n            file=None) -> dict:\n        \"\"\"\n        :param method: 请求方法\n        :param url: 请求url\n        :param parametric_key: 入参关键字， params(查询参数类型，明文传输，一般在url?参数名=参数值), data(一般用于form表单类型参数)\n        json(一般用于json类型请求参数)\n        :param check_mode: 检验方式，有code和json两种\n        :param data: 参数数据，默认等于None\n        :param file: 文件对象\n        :param header: 请求头\n        :return: 返回res对象\n        \"\"\"\n        session = cls.get_session()\n    \n        if parametric_key == 'params':\n            res = session.request(\n                method=method,\n                url=url,\n                params=data,\n                headers=header)\n        elif parametric_key == 'data':\n            res = session.request(\n                method=method,\n                url=url,\n                data=data,\n                files=file,\n                headers=header)\n        elif parametric_key == 'json':\n            res = session.request(\n                method=method,\n                url=url,\n                json=data,\n                files=file,\n                headers=header)\n        else:\n            raise ValueError(\n                '可选关键字为params, json, data')\n    \n    \n    \n        #接口不返回数据时，处理掉\n        try :\n            res.json()\n        except Exception as e:\n            assert res.status_code == 200\n            logger.info(f\"\\n状态为：{res.status_code}\")\n            logger.info(f\"\\n错误{e},返回数据不是json\")\n            return None\n    \n        response = res.json()\n        logger.info(\n            f'\\n最终请求地址:{res.url}\\n请求方法:{method}\\n请求头:{header}\\n请求参数:{data}\\n上传文件:{file}\\n相应状态码{res.status_code}\\n响应数据:{response}')\n        allure_step_no(f'响应耗时(s): {res.elapsed.total_seconds()}')\n>       allure_step('响应结果', response.json())\nE       AttributeError: 'dict' object has no attribute 'json'\n\napi\\base_requests.py:116: AttributeError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "cases",
    "time" : {
      "start" : 1642130430308,
      "stop" : 1642130430308,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "AttributeError: 'dict' object has no attribute 'json'",
    "statusTrace" : "cases = ['c37', '服务配置编辑-global', '{\"Authorization\": \"${token}\"}', 'config/service/update', 'post', 'json', ...]\n\n    @pytest.mark.flaky(reruns=None, reruns_delay=1) #pytest 失败重跑装饰器\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n>       response, response_code, expect, sql, check_mode = BaseRequest.send_request(cases, env = 'dev')\n\ntest\\test_api.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\napi\\base_requests.py:49: in send_request\n    response, response_code = cls.send_api(url, method, parametric_key, check_mode, header, data, file)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'api.base_requests.BaseRequest'>\nurl = 'http://192.168.5.120:8080/backend/config/service/update', method = 'post'\nparametric_key = 'json', check_mode = ''\nheader = {'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'zh-CN,zh;q=0.9', 'Authorization': '${token}', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36'}\ndata = {'configContent': [{'id': '1642130430', 'key': 'key1', 'value': 'value2'}], 'configType': 'global'}\nfile = None\n\n    @classmethod\n    def send_api(\n            cls,\n            url,\n            method,\n            parametric_key,\n            check_mode,\n            header=None,\n            data=None,\n            file=None) -> dict:\n        \"\"\"\n        :param method: 请求方法\n        :param url: 请求url\n        :param parametric_key: 入参关键字， params(查询参数类型，明文传输，一般在url?参数名=参数值), data(一般用于form表单类型参数)\n        json(一般用于json类型请求参数)\n        :param check_mode: 检验方式，有code和json两种\n        :param data: 参数数据，默认等于None\n        :param file: 文件对象\n        :param header: 请求头\n        :return: 返回res对象\n        \"\"\"\n        session = cls.get_session()\n    \n        if parametric_key == 'params':\n            res = session.request(\n                method=method,\n                url=url,\n                params=data,\n                headers=header)\n        elif parametric_key == 'data':\n            res = session.request(\n                method=method,\n                url=url,\n                data=data,\n                files=file,\n                headers=header)\n        elif parametric_key == 'json':\n            res = session.request(\n                method=method,\n                url=url,\n                json=data,\n                files=file,\n                headers=header)\n        else:\n            raise ValueError(\n                '可选关键字为params, json, data')\n    \n    \n    \n        #接口不返回数据时，处理掉\n        try :\n            res.json()\n        except Exception as e:\n            assert res.status_code == 200\n            logger.info(f\"\\n状态为：{res.status_code}\")\n            logger.info(f\"\\n错误{e},返回数据不是json\")\n            return None\n    \n        response = res.json()\n        logger.info(\n            f'\\n最终请求地址:{res.url}\\n请求方法:{method}\\n请求头:{header}\\n请求参数:{data}\\n上传文件:{file}\\n相应状态码{res.status_code}\\n响应数据:{response}')\n        allure_step_no(f'响应耗时(s): {res.elapsed.total_seconds()}')\n>       allure_step('响应结果', response.json())\nE       AttributeError: 'dict' object has no attribute 'json'\n\napi\\base_requests.py:116: AttributeError",
    "steps" : [ {
      "name" : "请求地址: http://192.168.5.120:8080/backend/config/service/update",
      "time" : {
        "start" : 1642130430308,
        "stop" : 1642130430308,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "请求头",
      "time" : {
        "start" : 1642130430309,
        "stop" : 1642130430309,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "e3b702b72451745",
        "name" : "请求头",
        "source" : "e3b702b72451745.json",
        "type" : "application/json",
        "size" : 253
      } ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 1,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "请求数据",
      "time" : {
        "start" : 1642130430310,
        "stop" : 1642130430310,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "5b1603ab155ffec8",
        "name" : "请求数据",
        "source" : "5b1603ab155ffec8.json",
        "type" : "application/json",
        "size" : 169
      } ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 1,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "响应耗时(s): 0.001271",
      "time" : {
        "start" : 1642130430313,
        "stop" : 1642130430313,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : false
    } ],
    "attachments" : [ {
      "uid" : "6aab697a9a394498",
      "name" : "stderr",
      "source" : "6aab697a9a394498.txt",
      "type" : "text/plain",
      "size" : 1726
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 3,
    "stepsCount" : 4,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "flaky(reruns=None, reruns_delay=1)"
  }, {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "host",
    "value" : "DESKTOP-BNVFIE4"
  }, {
    "name" : "thread",
    "value" : "20868-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "cases",
    "value" : "['c37', '服务配置编辑-global', '{\"Authorization\": \"${token}\"}', 'config/service/update', 'post', 'json', '', '', '{\"configType\":\"global\",\"configContent\":[{\"key\":\"key1\",\"value\":\"value2\",\"id\":\"${get_current_highest()}\"}]}', '', '', '{\"$.data.msg\": \"success\"}']"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "flaky(reruns=None, reruns_delay=1)" ]
  },
  "source" : "35e075248efd27a8.json",
  "parameterValues" : [ "['c37', '服务配置编辑-global', '{\"Authorization\": \"${token}\"}', 'config/service/update', 'post', 'json', '', '', '{\"configType\":\"global\",\"configContent\":[{\"key\":\"key1\",\"value\":\"value2\",\"id\":\"${get_current_highest()}\"}]}', '', '', '{\"$.data.msg\": \"success\"}']" ]
}