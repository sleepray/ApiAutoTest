{
  "uid" : "90c59f7a9e620fb8",
  "name" : "post请求实现登录",
  "fullName" : "test.test_api#test_main",
  "historyId" : "8174f8ecb1004db16679a852ff5f760a",
  "time" : {
    "start" : 1642130649033,
    "stop" : 1642130649043,
    "duration" : 10
  },
  "status" : "broken",
  "statusMessage" : "ValueError: invalid literal for int() with base 10: '{\"$.code\":0}'",
  "statusTrace" : "cases = ['c1', 'post请求实现登录', '', 'user/login', 'post', 'json', ...]\n\n    @pytest.mark.flaky(reruns=None, reruns_delay=1) #pytest 失败重跑装饰器\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n        response, response_code, expect, sql, check_mode = BaseRequest.send_request(cases, env = 'dev')\n        # 断言操作\n>       DataProcess.assert_result(response, response_code, expect, check_mode)\n\ntest\\test_api.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'code': 0, 'data': 'DPn3ZB1AcUi6az/GMSrY1VBiX+zjzaMmvWSPjHzlElQ=', 'msg': ''}\nresponse_code = 200, expect_str = '{\"$.code\":0}', check_mode = 'check_code'\n\n    @classmethod\n    def assert_result(cls, response: dict, response_code: str, expect_str: str, check_mode: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n    \n        #当接口返回为空时，处理掉\n        if response == None:\n            return 1\n    \n        if check_mode == 'check_code':\n            logger.info(\n>               f'实际结果:{response_code} | 预期结果:{expect_str} \\n断言结果 {int(expect_str) == int(response_code)}')\nE           ValueError: invalid literal for int() with base 10: '{\"$.code\":0}'\n\ntools\\data_process.py:129: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "cases",
    "time" : {
      "start" : 1642130649031,
      "stop" : 1642130649031,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "ValueError: invalid literal for int() with base 10: '{\"$.code\":0}'",
    "statusTrace" : "cases = ['c1', 'post请求实现登录', '', 'user/login', 'post', 'json', ...]\n\n    @pytest.mark.flaky(reruns=None, reruns_delay=1) #pytest 失败重跑装饰器\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n        response, response_code, expect, sql, check_mode = BaseRequest.send_request(cases, env = 'dev')\n        # 断言操作\n>       DataProcess.assert_result(response, response_code, expect, check_mode)\n\ntest\\test_api.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'code': 0, 'data': 'DPn3ZB1AcUi6az/GMSrY1VBiX+zjzaMmvWSPjHzlElQ=', 'msg': ''}\nresponse_code = 200, expect_str = '{\"$.code\":0}', check_mode = 'check_code'\n\n    @classmethod\n    def assert_result(cls, response: dict, response_code: str, expect_str: str, check_mode: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n    \n        #当接口返回为空时，处理掉\n        if response == None:\n            return 1\n    \n        if check_mode == 'check_code':\n            logger.info(\n>               f'实际结果:{response_code} | 预期结果:{expect_str} \\n断言结果 {int(expect_str) == int(response_code)}')\nE           ValueError: invalid literal for int() with base 10: '{\"$.code\":0}'\n\ntools\\data_process.py:129: ValueError",
    "steps" : [ {
      "name" : "请求地址: http://192.168.5.120:8080/backend/user/login",
      "time" : {
        "start" : 1642130649033,
        "stop" : 1642130649033,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "请求头",
      "time" : {
        "start" : 1642130649033,
        "stop" : 1642130649034,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "5ad34cf53c97806a",
        "name" : "请求头",
        "source" : "5ad34cf53c97806a.json",
        "type" : "application/json",
        "size" : 220
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false
    }, {
      "name" : "请求数据",
      "time" : {
        "start" : 1642130649034,
        "stop" : 1642130649035,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "ada8e82f25b45350",
        "name" : "请求数据",
        "source" : "ada8e82f25b45350.json",
        "type" : "application/json",
        "size" : 55
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false
    }, {
      "name" : "响应耗时(s): 0.003864",
      "time" : {
        "start" : 1642130649041,
        "stop" : 1642130649041,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "响应结果",
      "time" : {
        "start" : 1642130649041,
        "stop" : 1642130649042,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "51702e6cbf41a154",
        "name" : "响应结果",
        "source" : "51702e6cbf41a154.json",
        "type" : "application/json",
        "size" : 92
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ {
      "uid" : "9f5c60f4085e68e5",
      "name" : "stderr",
      "source" : "9f5c60f4085e68e5.txt",
      "type" : "text/plain",
      "size" : 1615
    } ],
    "parameters" : [ ],
    "stepsCount" : 5,
    "hasContent" : true,
    "attachmentsCount" : 4,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "flaky(reruns=None, reruns_delay=1)"
  }, {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "host",
    "value" : "DESKTOP-BNVFIE4"
  }, {
    "name" : "thread",
    "value" : "10820-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "cases",
    "value" : "['c1', 'post请求实现登录', '', 'user/login', 'post', 'json', '', 'check_code', '{\"username\": \"admin\", \"password\": \"password\"}', '{\"token\": \"$.data\"}', 'select * from apis; select * from cases', '{\"$.code\":0}']"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "flaky(reruns=None, reruns_delay=1)" ]
  },
  "source" : "90c59f7a9e620fb8.json",
  "parameterValues" : [ "['c1', 'post请求实现登录', '', 'user/login', 'post', 'json', '', 'check_code', '{\"username\": \"admin\", \"password\": \"password\"}', '{\"token\": \"$.data\"}', 'select * from apis; select * from cases', '{\"$.code\":0}']" ]
}