{
  "uid" : "cf06517dabcce324",
  "name" : "负载均衡-哈希",
  "fullName" : "test.test_api#test_main",
  "historyId" : "f9a3a528aa08d345b131e068670a2332",
  "time" : {
    "start" : 1642130475248,
    "stop" : 1642130475254,
    "duration" : 6
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: 第1个断言失败 -|- 实际结果:$.data.msg || 预期结果: success",
  "statusTrace" : "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'code': 303, 'data': None, 'msg': 'token错误'}, response_code = 401\nexpect_str = '{\"$.data.msg\": \"success\"}', check_mode = ''\n\n    @classmethod\n    def assert_result(cls, response: dict, response_code: str, expect_str: str, check_mode: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n    \n        #当接口返回为空时，处理掉\n        if response == None:\n            return 1\n    \n        if check_mode == 'check_code':\n            logger.info(\n                f'实际结果:{response_code} | 预期结果:{expect_str} \\n断言结果 {int(expect_str) == int(response_code)}')\n            allure_step(f'实际结果:{response_code} = 预期结果:{expect_str}')\n            try:\n                assert int(expect_str) == int(response_code)\n            except AssertionError:\n                raise AssertionError(\n                    f'断言失败 -|- 实际结果:{expect_str} || 预期结果: {response_code}')\n        else:\n            # 后置sql变量转换\n            allure_step(\"当前可用参数池\", cls.extra_pool)\n            expect_str = rep_expr(expect_str, cls.extra_pool)\n            expect_dict = convert_json(expect_str)\n            index = 0\n            for k, v in expect_dict.items():\n                # 获取需要断言的实际结果部分\n                actual = extractor(response, k)\n                index += 1\n                logger.info(\n                    f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n                allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}')\n                try:\n>                   assert actual == v\nE                   AssertionError\n\ntools\\data_process.py:151: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['c4', '负载均衡-哈希', '{\"Authorization\": \"${token}\"}', 'config/update', 'post', 'json', ...]\n\n    @pytest.mark.flaky(reruns=None, reruns_delay=1) #pytest 失败重跑装饰器\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n        response, response_code, expect, sql, check_mode = BaseRequest.send_request(cases, env = 'dev')\n        # 断言操作\n>       DataProcess.assert_result(response, response_code, expect, check_mode)\n\ntest\\test_api.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'code': 303, 'data': None, 'msg': 'token错误'}, response_code = 401\nexpect_str = '{\"$.data.msg\": \"success\"}', check_mode = ''\n\n    @classmethod\n    def assert_result(cls, response: dict, response_code: str, expect_str: str, check_mode: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n    \n        #当接口返回为空时，处理掉\n        if response == None:\n            return 1\n    \n        if check_mode == 'check_code':\n            logger.info(\n                f'实际结果:{response_code} | 预期结果:{expect_str} \\n断言结果 {int(expect_str) == int(response_code)}')\n            allure_step(f'实际结果:{response_code} = 预期结果:{expect_str}')\n            try:\n                assert int(expect_str) == int(response_code)\n            except AssertionError:\n                raise AssertionError(\n                    f'断言失败 -|- 实际结果:{expect_str} || 预期结果: {response_code}')\n        else:\n            # 后置sql变量转换\n            allure_step(\"当前可用参数池\", cls.extra_pool)\n            expect_str = rep_expr(expect_str, cls.extra_pool)\n            expect_dict = convert_json(expect_str)\n            index = 0\n            for k, v in expect_dict.items():\n                # 获取需要断言的实际结果部分\n                actual = extractor(response, k)\n                index += 1\n                logger.info(\n                    f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n                allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}')\n                try:\n                    assert actual == v\n                except AssertionError:\n>                   raise AssertionError(\n                        f'第{index}个断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE                   AssertionError: 第1个断言失败 -|- 实际结果:$.data.msg || 预期结果: success\n\ntools\\data_process.py:153: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "cases",
    "time" : {
      "start" : 1642130475248,
      "stop" : 1642130475248,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: 第1个断言失败 -|- 实际结果:$.data.msg || 预期结果: success",
    "statusTrace" : "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'code': 303, 'data': None, 'msg': 'token错误'}, response_code = 401\nexpect_str = '{\"$.data.msg\": \"success\"}', check_mode = ''\n\n    @classmethod\n    def assert_result(cls, response: dict, response_code: str, expect_str: str, check_mode: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n    \n        #当接口返回为空时，处理掉\n        if response == None:\n            return 1\n    \n        if check_mode == 'check_code':\n            logger.info(\n                f'实际结果:{response_code} | 预期结果:{expect_str} \\n断言结果 {int(expect_str) == int(response_code)}')\n            allure_step(f'实际结果:{response_code} = 预期结果:{expect_str}')\n            try:\n                assert int(expect_str) == int(response_code)\n            except AssertionError:\n                raise AssertionError(\n                    f'断言失败 -|- 实际结果:{expect_str} || 预期结果: {response_code}')\n        else:\n            # 后置sql变量转换\n            allure_step(\"当前可用参数池\", cls.extra_pool)\n            expect_str = rep_expr(expect_str, cls.extra_pool)\n            expect_dict = convert_json(expect_str)\n            index = 0\n            for k, v in expect_dict.items():\n                # 获取需要断言的实际结果部分\n                actual = extractor(response, k)\n                index += 1\n                logger.info(\n                    f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n                allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}')\n                try:\n>                   assert actual == v\nE                   AssertionError\n\ntools\\data_process.py:151: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['c4', '负载均衡-哈希', '{\"Authorization\": \"${token}\"}', 'config/update', 'post', 'json', ...]\n\n    @pytest.mark.flaky(reruns=None, reruns_delay=1) #pytest 失败重跑装饰器\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n        response, response_code, expect, sql, check_mode = BaseRequest.send_request(cases, env = 'dev')\n        # 断言操作\n>       DataProcess.assert_result(response, response_code, expect, check_mode)\n\ntest\\test_api.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'code': 303, 'data': None, 'msg': 'token错误'}, response_code = 401\nexpect_str = '{\"$.data.msg\": \"success\"}', check_mode = ''\n\n    @classmethod\n    def assert_result(cls, response: dict, response_code: str, expect_str: str, check_mode: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n    \n        #当接口返回为空时，处理掉\n        if response == None:\n            return 1\n    \n        if check_mode == 'check_code':\n            logger.info(\n                f'实际结果:{response_code} | 预期结果:{expect_str} \\n断言结果 {int(expect_str) == int(response_code)}')\n            allure_step(f'实际结果:{response_code} = 预期结果:{expect_str}')\n            try:\n                assert int(expect_str) == int(response_code)\n            except AssertionError:\n                raise AssertionError(\n                    f'断言失败 -|- 实际结果:{expect_str} || 预期结果: {response_code}')\n        else:\n            # 后置sql变量转换\n            allure_step(\"当前可用参数池\", cls.extra_pool)\n            expect_str = rep_expr(expect_str, cls.extra_pool)\n            expect_dict = convert_json(expect_str)\n            index = 0\n            for k, v in expect_dict.items():\n                # 获取需要断言的实际结果部分\n                actual = extractor(response, k)\n                index += 1\n                logger.info(\n                    f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n                allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}')\n                try:\n                    assert actual == v\n                except AssertionError:\n>                   raise AssertionError(\n                        f'第{index}个断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE                   AssertionError: 第1个断言失败 -|- 实际结果:$.data.msg || 预期结果: success\n\ntools\\data_process.py:153: AssertionError",
    "steps" : [ {
      "name" : "请求地址: http://192.168.5.120:8080/backend/config/update",
      "time" : {
        "start" : 1642130475249,
        "stop" : 1642130475249,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "请求头",
      "time" : {
        "start" : 1642130475249,
        "stop" : 1642130475250,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "9999f01c1fcb8e3e",
        "name" : "请求头",
        "source" : "9999f01c1fcb8e3e.json",
        "type" : "application/json",
        "size" : 253
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false
    }, {
      "name" : "请求数据",
      "time" : {
        "start" : 1642130475250,
        "stop" : 1642130475250,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "d280d23606617c16",
        "name" : "请求数据",
        "source" : "d280d23606617c16.json",
        "type" : "application/json",
        "size" : 82
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false
    }, {
      "name" : "响应耗时(s): 0.001083",
      "time" : {
        "start" : 1642130475252,
        "stop" : 1642130475252,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "响应结果",
      "time" : {
        "start" : 1642130475252,
        "stop" : 1642130475252,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "c1b13b0f5d009841",
        "name" : "响应结果",
        "source" : "c1b13b0f5d009841.json",
        "type" : "application/json",
        "size" : 63
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false
    }, {
      "name" : "当前可用参数池",
      "time" : {
        "start" : 1642130475252,
        "stop" : 1642130475253,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "8ab1a57ec540d93e",
        "name" : "当前可用参数池",
        "source" : "8ab1a57ec540d93e.json",
        "type" : "application/json",
        "size" : 2
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false
    }, {
      "name" : "第1个断言",
      "time" : {
        "start" : 1642130475253,
        "stop" : 1642130475253,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "f9367a29afd8403e",
        "name" : "第1个断言",
        "source" : "f9367a29afd8403e.json",
        "type" : "application/json",
        "size" : 48
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ {
      "uid" : "434afedeb358cce1",
      "name" : "stderr",
      "source" : "434afedeb358cce1.txt",
      "type" : "text/plain",
      "size" : 2056
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 7,
    "attachmentsCount" : 6,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "flaky(reruns=None, reruns_delay=1)"
  }, {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "host",
    "value" : "DESKTOP-BNVFIE4"
  }, {
    "name" : "thread",
    "value" : "14132-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "cases",
    "value" : "['c4', '负载均衡-哈希', '{\"Authorization\": \"${token}\"}', 'config/update', 'post', 'json', '', '', '{\"key\":\"loadBalance.default\",\"value\":\"2\",\"configType\":\"global\"}', '', '', '{\"$.data.msg\": \"success\"}']"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "flaky(reruns=None, reruns_delay=1)" ]
  },
  "source" : "cf06517dabcce324.json",
  "parameterValues" : [ "['c4', '负载均衡-哈希', '{\"Authorization\": \"${token}\"}', 'config/update', 'post', 'json', '', '', '{\"key\":\"loadBalance.default\",\"value\":\"2\",\"configType\":\"global\"}', '', '', '{\"$.data.msg\": \"success\"}']" ]
}