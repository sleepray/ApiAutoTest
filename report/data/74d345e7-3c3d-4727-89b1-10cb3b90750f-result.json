{"name": "流量控制列表查询", "status": "broken", "statusDetails": {"message": "TypeError: the JSON object must be str, bytes or bytearray, not dict", "trace": "cases = ['c45', '流量控制列表查询', '{\"Authorization\": \"${token}\"}', 'config/trafficControl/list', 'get', 'params', ...]\n\n    @pytest.mark.flaky(reruns=None, reruns_delay=1) #pytest 失败重跑装饰器\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n>       response, response_code, expect, sql, check_mode = BaseRequest.send_request(cases, env = 'dev')\n\ntest\\test_api.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\napi\\base_requests.py:51: in send_request\n    DataProcess.handle_extra(extra, response)\ntools\\data_process.py:110: in handle_extra\n    response = json.loads(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = {'code': 303, 'data': None, 'msg': 'token错误'}, cls = None\nobject_hook = None, parse_float = None, parse_int = None, parse_constant = None\nobject_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n>               raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\nE               TypeError: the JSON object must be str, bytes or bytearray, not dict\n\nE:\\python3.9.6\\lib\\json\\__init__.py:339: TypeError"}, "steps": [{"name": "请求地址: http://192.168.5.120:8080/backend/config/trafficControl/list", "status": "passed", "start": 1642130475857, "stop": 1642130475857}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "1b2e7c76-bb65-4444-a146-79c197248f4c-attachment.json", "type": "application/json"}], "start": 1642130475857, "stop": 1642130475857}, {"name": "请求数据", "status": "passed", "attachments": [{"name": "请求数据", "source": "1b0ff777-80e3-4f22-94fd-4aedaaad8ad2-attachment.json", "type": "application/json"}], "start": 1642130475858, "stop": 1642130475858}, {"name": "响应耗时(s): 0.000976", "status": "passed", "start": 1642130475860, "stop": 1642130475860}, {"name": "响应结果", "status": "passed", "attachments": [{"name": "响应结果", "source": "1f30ea88-66b2-44e0-ba05-ee13fd5b2149-attachment.json", "type": "application/json"}], "start": 1642130475860, "stop": 1642130475860}], "attachments": [{"name": "stderr", "source": "a9f53403-f779-4762-b17a-a8f3f7acb2ef-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "cases", "value": "['c45', '流量控制列表查询', '{\"Authorization\": \"${token}\"}', 'config/trafficControl/list', 'get', 'params', '', '', '', '{\"configType\":\"$.data.list.0.configType\", \"key\":\"$.data.list.0.key\"}', '', '{\"$.code\": 0}']"}], "start": 1642130475856, "stop": 1642130475860, "uuid": "b95e5136-b6ba-47a0-ad41-861e3b82678c", "historyId": "ec999774bf7c8464897cde7576530d0d", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=None, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "DESKTOP-BNVFIE4"}, {"name": "thread", "value": "14132-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}