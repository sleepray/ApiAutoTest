{"name": "负载均衡-最小连接", "status": "failed", "statusDetails": {"message": "AssertionError: 第1个断言失败 -|- 实际结果:$.data.msg || 预期结果: success", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'code': 303, 'data': None, 'msg': 'token错误'}, response_code = 401\nexpect_str = '{\"$.data.msg\": \"success\"}', check_mode = ''\n\n    @classmethod\n    def assert_result(cls, response: dict, response_code: str, expect_str: str, check_mode: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n    \n        #当接口返回为空时，处理掉\n        if response == None:\n            return 1\n    \n        if check_mode == 'check_code':\n            logger.info(\n                f'实际结果:{response_code} | 预期结果:{expect_str} \\n断言结果 {int(expect_str) == int(response_code)}')\n            allure_step(f'实际结果:{response_code} = 预期结果:{expect_str}')\n            try:\n                assert int(expect_str) == int(response_code)\n            except AssertionError:\n                raise AssertionError(\n                    f'断言失败 -|- 实际结果:{expect_str} || 预期结果: {response_code}')\n        else:\n            # 后置sql变量转换\n            allure_step(\"当前可用参数池\", cls.extra_pool)\n            expect_str = rep_expr(expect_str, cls.extra_pool)\n            expect_dict = convert_json(expect_str)\n            index = 0\n            for k, v in expect_dict.items():\n                # 获取需要断言的实际结果部分\n                actual = extractor(response, k)\n                index += 1\n                logger.info(\n                    f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n                allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}')\n                try:\n>                   assert actual == v\nE                   AssertionError\n\ntools\\data_process.py:151: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['c5', '负载均衡-最小连接', '{\"Authorization\": \"${token}\"}', 'config/update', 'post', 'json', ...]\n\n    @pytest.mark.flaky(reruns=None, reruns_delay=1) #pytest 失败重跑装饰器\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n        response, response_code, expect, sql, check_mode = BaseRequest.send_request(cases, env = 'dev')\n        # 断言操作\n>       DataProcess.assert_result(response, response_code, expect, check_mode)\n\ntest\\test_api.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'code': 303, 'data': None, 'msg': 'token错误'}, response_code = 401\nexpect_str = '{\"$.data.msg\": \"success\"}', check_mode = ''\n\n    @classmethod\n    def assert_result(cls, response: dict, response_code: str, expect_str: str, check_mode: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n    \n        #当接口返回为空时，处理掉\n        if response == None:\n            return 1\n    \n        if check_mode == 'check_code':\n            logger.info(\n                f'实际结果:{response_code} | 预期结果:{expect_str} \\n断言结果 {int(expect_str) == int(response_code)}')\n            allure_step(f'实际结果:{response_code} = 预期结果:{expect_str}')\n            try:\n                assert int(expect_str) == int(response_code)\n            except AssertionError:\n                raise AssertionError(\n                    f'断言失败 -|- 实际结果:{expect_str} || 预期结果: {response_code}')\n        else:\n            # 后置sql变量转换\n            allure_step(\"当前可用参数池\", cls.extra_pool)\n            expect_str = rep_expr(expect_str, cls.extra_pool)\n            expect_dict = convert_json(expect_str)\n            index = 0\n            for k, v in expect_dict.items():\n                # 获取需要断言的实际结果部分\n                actual = extractor(response, k)\n                index += 1\n                logger.info(\n                    f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n                allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}')\n                try:\n                    assert actual == v\n                except AssertionError:\n>                   raise AssertionError(\n                        f'第{index}个断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE                   AssertionError: 第1个断言失败 -|- 实际结果:$.data.msg || 预期结果: success\n\ntools\\data_process.py:153: AssertionError"}, "steps": [{"name": "请求地址: http://192.168.5.120:8080/backend/config/update", "status": "passed", "start": 1642130475263, "stop": 1642130475263}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "bc0940f0-c6f8-43e8-acbf-63527eb24f73-attachment.json", "type": "application/json"}], "start": 1642130475263, "stop": 1642130475264}, {"name": "请求数据", "status": "passed", "attachments": [{"name": "请求数据", "source": "59ae70cb-81ea-46a0-a2c6-1a676b0a43d6-attachment.json", "type": "application/json"}], "start": 1642130475264, "stop": 1642130475264}, {"name": "响应耗时(s): 0.000986", "status": "passed", "start": 1642130475266, "stop": 1642130475266}, {"name": "响应结果", "status": "passed", "attachments": [{"name": "响应结果", "source": "c46b69f3-a037-4a0e-900b-bdb0ba356c87-attachment.json", "type": "application/json"}], "start": 1642130475266, "stop": 1642130475267}, {"name": "当前可用参数池", "status": "passed", "attachments": [{"name": "当前可用参数池", "source": "5093412b-0531-4f55-8896-8b80b0e81d42-attachment.json", "type": "application/json"}], "start": 1642130475267, "stop": 1642130475267}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "ed84a8a5-b207-4cc8-87a2-865ebb27d191-attachment.json", "type": "application/json"}], "start": 1642130475267, "stop": 1642130475268}], "attachments": [{"name": "stderr", "source": "e27264b6-41c5-485e-9045-1c9c1d3878f9-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "cases", "value": "['c5', '负载均衡-最小连接', '{\"Authorization\": \"${token}\"}', 'config/update', 'post', 'json', '', '', '{\"key\":\"loadBalance.default\",\"value\":\"3\",\"configType\":\"global\"}', '', '', '{\"$.data.msg\": \"success\"}']"}], "start": 1642130475263, "stop": 1642130475268, "uuid": "a7443f72-5ec5-4eb8-a4bf-3447bffc638f", "historyId": "0739167ffd7bddb403117cdf6fcb588f", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=None, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "DESKTOP-BNVFIE4"}, {"name": "thread", "value": "14132-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}