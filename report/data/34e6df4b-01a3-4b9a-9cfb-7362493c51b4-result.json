{"name": "条件表达式删除", "status": "broken", "statusDetails": {"message": "ValueError: invalid literal for int() with base 10: ''", "trace": "cases = ['c34', '条件表达式删除', '{\"Authorization\": \"${token}\"}', 'condition/delete', 'get', 'params', ...]\n\n    @pytest.mark.flaky(reruns=None, reruns_delay=1) #pytest 失败重跑装饰器\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n        response, response_code, expect, sql, check_mode = BaseRequest.send_request(cases, env = 'dev')\n        # 断言操作\n>       DataProcess.assert_result(response, response_code, expect, check_mode)\n\ntest\\test_api.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tools.data_process.DataProcess'>, response = None\nresponse_code = None, expect_str = '', check_mode = 'check_code'\n\n    @classmethod\n    def assert_result(cls, response: dict, response_code: str, expect_str: str, check_mode: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n    \n        #当接口返回为空时，处理掉\n        if response == None:\n            logger.info(\n                f'断言结果, 返回值为空,无法断言')\n            allure_step(f'断言结果', f'返回值为空,无法断言')\n    \n        if check_mode == 'check_code':\n            logger.info(\n>               f'断言结果, 实际结果:{response_code} | 预期结果:{expect_str} \\n断言结果 {int(expect_str) == int(response_code)}')\nE           ValueError: invalid literal for int() with base 10: ''\n\ntools\\data_process.py:131: ValueError"}, "steps": [{"name": "请求地址: http://192.168.5.120:8080/backend/condition/delete", "status": "passed", "start": 1642139737763, "stop": 1642139737763}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "9a79be97-44b1-41ee-a261-c95ae211d639-attachment.json", "type": "application/json"}], "start": 1642139737763, "stop": 1642139737763}, {"name": "请求数据", "status": "passed", "attachments": [{"name": "请求数据", "source": "69327fcb-d941-4bad-a06e-bd321a015c0e-attachment.json", "type": "application/json"}], "start": 1642139737763, "stop": 1642139737763}, {"name": "错误信息", "status": "passed", "attachments": [{"name": "错误信息", "source": "299d028a-d8cb-4637-896e-08f314cf341f-attachment.json", "type": "application/json"}], "start": 1642139737767, "stop": 1642139737768}, {"name": "断言结果", "status": "passed", "attachments": [{"name": "断言结果", "source": "222abc06-589f-4794-b9c9-fa2a0b1aec45-attachment.json", "type": "application/json"}], "start": 1642139737768, "stop": 1642139737768}], "attachments": [{"name": "stderr", "source": "57786e87-485b-4b54-b944-b1aefa9c0753-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "cases", "value": "['c34', '条件表达式删除', '{\"Authorization\": \"${token}\"}', 'condition/delete', 'get', 'params', '', 'check_code', '{\"name\":\"服务1\"}', '', '', '']"}], "start": 1642139737762, "stop": 1642139737768, "uuid": "debe5061-2057-49ac-9ad6-d1ea018ec655", "historyId": "abfd3a4f7f4e445d9fadd1040c41f2e2", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=None, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "DESKTOP-BNVFIE4"}, {"name": "thread", "value": "18440-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}