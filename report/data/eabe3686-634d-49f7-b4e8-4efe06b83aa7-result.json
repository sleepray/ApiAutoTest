{"name": "用户编辑", "status": "broken", "statusDetails": {"message": "ValueError: invalid literal for int() with base 10: '{\"$.data\": \"用户修改成功!!!!!!!\"}'", "trace": "cases = ['c3', '用户编辑', '{\"Authorization\": \"${token}\"}', 'userMgr/user', 'put', 'json', ...]\n\n    @pytest.mark.flaky(reruns=None, reruns_delay=1) #pytest 失败重跑装饰器\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n        response, response_code, expect, sql, check_mode = BaseRequest.send_request(cases, env = 'dev')\n        # 断言操作\n>       DataProcess.assert_result(response, response_code, expect, check_mode)\n\ntest\\test_api.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'code': '200', 'data': '用户修改成功!!!!!!!', 'message': '服务器处理成功'}\nresponse_code = 200, expect_str = '{\"$.data\": \"用户修改成功!!!!!!!\"}'\ncheck_mode = 'check_code'\n\n    @classmethod\n    def assert_result(cls, response: dict, response_code: str, expect_str: str, check_mode: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n    \n        #当接口返回为空时，处理掉\n        if response == None:\n            logger.info(\n                f'断言结果, 返回值为空,无法断言')\n            allure_step(f'断言结果', f'返回值为空,无法断言')\n            return None\n    \n        if check_mode == 'check_code':\n            logger.info(\n>               f'断言结果, 实际结果:{response_code} | 预期结果:{expect_str} \\n断言结果 {int(expect_str) == int(response_code)}')\nE           ValueError: invalid literal for int() with base 10: '{\"$.data\": \"用户修改成功!!!!!!!\"}'\n\ntools\\data_process.py:132: ValueError"}, "steps": [{"name": "请求地址: http://172.16.8.251:81/api/userMgr/user", "status": "passed", "start": 1642502490504, "stop": 1642502490505}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "917435ff-70b4-4588-a678-e61d9727852a-attachment.json", "type": "application/json"}], "start": 1642502490505, "stop": 1642502490505}, {"name": "请求数据", "status": "passed", "attachments": [{"name": "请求数据", "source": "add63390-df94-40a5-a886-9b655b7d4bd0-attachment.json", "type": "application/json"}], "start": 1642502490505, "stop": 1642502490506}, {"name": "响应耗时(s): 0.010472", "status": "passed", "start": 1642502490517, "stop": 1642502490517}, {"name": "响应结果", "status": "passed", "attachments": [{"name": "响应结果", "source": "fe0a7a3c-0959-4b16-b1cc-fa45eb473874-attachment.json", "type": "application/json"}], "start": 1642502490517, "stop": 1642502490518}], "parameters": [{"name": "cases", "value": "['c3', '用户编辑', '{\"Authorization\": \"${token}\"}', 'userMgr/user', 'put', 'json', '', 'check_code', '{\"username\":\"322\",\"roleIds\":[70],\"id\":71}', '', '', '{\"$.data\": \"用户修改成功!!!!!!!\"}']"}], "start": 1642502490504, "stop": 1642502490518, "uuid": "2ec3f35f-0fc3-48d8-a113-e00cb28bc33c", "historyId": "3a098e261ee7b9115a8be890393002aa", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=None, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "DESKTOP-BNVFIE4"}, {"name": "thread", "value": "15960-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}