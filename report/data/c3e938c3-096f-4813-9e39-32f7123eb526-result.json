{"name": "用户编辑", "status": "failed", "statusDetails": {"message": "AssertionError: 第1个断言失败 -|- 实际结果:None || 预期结果: 用户修改成功!!!!!!!", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'code': '555', 'data': None, 'message': '用户名已存在'}\nresponse_code = 200, expect_str = '{\"$.data\":\"用户修改成功!!!!!!!\"}'\ncheck_mode = 'check_json'\n\n    @classmethod\n    def assert_result(cls, response: dict, response_code: str, expect_str: str, check_mode: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n    \n        #当接口返回为空时，处理掉\n        if response == None:\n            allure_step(\"当前可用参数池\", cls.extra_pool)\n            logger.info(\n                f'断言结果, 返回值为空,无法断言')\n            allure_step(f'断言结果', f'返回值为空,无法断言')\n            return None\n    \n        if check_mode == 'check_code':\n            allure_step(\"当前可用参数池\", cls.extra_pool)\n            logger.info(\n                f'断言结果, 实际结果:{response_code} | 预期结果:{expect_str} \\n断言结果 {int(expect_str) == int(response_code)}')\n            allure_step(f'断言结果',f'实际结果状态码:{response_code} = 预期结果状态码:{expect_str}')\n            try:\n                assert int(expect_str) == int(response_code)\n            except AssertionError:\n                raise AssertionError(\n                    f'断言失败 -|- 实际结果:{expect_str} || 预期结果: {response_code}')\n        else:\n            # 后置sql变量转换\n            allure_step(\"当前可用参数池\", cls.extra_pool)\n            expect_str = rep_expr(expect_str, cls.extra_pool)\n            expect_dict = convert_json(expect_str)\n            index = 0\n            for k, v in expect_dict.items():\n                # 获取需要断言的实际结果部分\n                actual = extractor(response, k)\n                index += 1\n                logger.info(\n                    f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n                allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}')\n                try:\n>                   assert actual == v\nE                   AssertionError\n\ntools\\data_process.py:155: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['c7', '用户编辑', '{\"Authorization\": \"${token}\"}', 'userMgr/user', 'put', 'json', ...]\n\n    @pytest.mark.flaky(reruns=None, reruns_delay=1) #pytest 失败重跑装饰器\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n        response, response_code, expect, sql, check_mode = BaseRequest.send_request(cases, env = 'dev')\n        # 断言操作\n>       DataProcess.assert_result(response, response_code, expect, check_mode)\n\ntest\\test_api.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'code': '555', 'data': None, 'message': '用户名已存在'}\nresponse_code = 200, expect_str = '{\"$.data\":\"用户修改成功!!!!!!!\"}'\ncheck_mode = 'check_json'\n\n    @classmethod\n    def assert_result(cls, response: dict, response_code: str, expect_str: str, check_mode: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n    \n        #当接口返回为空时，处理掉\n        if response == None:\n            allure_step(\"当前可用参数池\", cls.extra_pool)\n            logger.info(\n                f'断言结果, 返回值为空,无法断言')\n            allure_step(f'断言结果', f'返回值为空,无法断言')\n            return None\n    \n        if check_mode == 'check_code':\n            allure_step(\"当前可用参数池\", cls.extra_pool)\n            logger.info(\n                f'断言结果, 实际结果:{response_code} | 预期结果:{expect_str} \\n断言结果 {int(expect_str) == int(response_code)}')\n            allure_step(f'断言结果',f'实际结果状态码:{response_code} = 预期结果状态码:{expect_str}')\n            try:\n                assert int(expect_str) == int(response_code)\n            except AssertionError:\n                raise AssertionError(\n                    f'断言失败 -|- 实际结果:{expect_str} || 预期结果: {response_code}')\n        else:\n            # 后置sql变量转换\n            allure_step(\"当前可用参数池\", cls.extra_pool)\n            expect_str = rep_expr(expect_str, cls.extra_pool)\n            expect_dict = convert_json(expect_str)\n            index = 0\n            for k, v in expect_dict.items():\n                # 获取需要断言的实际结果部分\n                actual = extractor(response, k)\n                index += 1\n                logger.info(\n                    f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n                allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}')\n                try:\n                    assert actual == v\n                except AssertionError:\n>                   raise AssertionError(\n                        f'第{index}个断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE                   AssertionError: 第1个断言失败 -|- 实际结果:None || 预期结果: 用户修改成功!!!!!!!\n\ntools\\data_process.py:157: AssertionError"}, "steps": [{"name": "请求地址: http://172.16.8.251:81/api/userMgr/user", "status": "passed", "start": 1643079251373, "stop": 1643079251373}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "84bb6dc2-5c05-495f-b812-2bd31f21588d-attachment.json", "type": "application/json"}], "start": 1643079251373, "stop": 1643079251375}, {"name": "请求数据", "status": "passed", "attachments": [{"name": "请求数据", "source": "b6bc4a5a-88d0-47bf-9eba-bd5f6e667091-attachment.json", "type": "application/json"}], "start": 1643079251375, "stop": 1643079251375}, {"name": "响应耗时(s): 0.007463", "status": "passed", "start": 1643079251383, "stop": 1643079251384}, {"name": "响应结果", "status": "passed", "attachments": [{"name": "响应结果", "source": "5c3aa277-a46e-4e70-85f4-4bbe77e0842d-attachment.json", "type": "application/json"}], "start": 1643079251384, "stop": 1643079251384}, {"name": "当前可用参数池", "status": "passed", "attachments": [{"name": "当前可用参数池", "source": "0a44f7fb-82af-4324-ac8b-612393276379-attachment.json", "type": "application/json"}], "start": 1643079251384, "stop": 1643079251384}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "e1b684b3-80bb-4f02-bb1b-bae24a8c0ca7-attachment.json", "type": "application/json"}], "start": 1643079251384, "stop": 1643079251385}], "parameters": [{"name": "cases", "value": "['c7', '用户编辑', '{\"Authorization\": \"${token}\"}', 'userMgr/user', 'put', 'json', '', 'check_json', '{\"username\":\"${username}1\",\"roleIds\":[${roleId}],\"id\":\"${id}\"}', '', '', '{\"$.data\":\"用户修改成功!!!!!!!\"}']"}], "start": 1643079251372, "stop": 1643079251385, "uuid": "e7441771-7e23-4c4c-aa41-4c2dd4178b84", "historyId": "94c53f645702c06e17118fd92e09f479", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=None, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "DESKTOP-BNVFIE4"}, {"name": "thread", "value": "26324-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}