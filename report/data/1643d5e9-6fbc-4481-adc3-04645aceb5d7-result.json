{"name": "添加用户", "status": "failed", "statusDetails": {"message": "AssertionError: 第1个断言失败 -|- 实际结果:None || 预期结果: 用户添加成功!!!!!!!", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'code': '500', 'data': None, 'message': 'JSON parse error: Cannot deserialize instance of `[Ljava.lang.Integer;` out ...ce: (PushbackInputStream); line: 1, column: 60] (through reference chain: cn.ghostcloud.admins.vo.UserReq[\"roleIds\"])'}\nresponse_code = 200, expect_str = '{\"$.data\":\"用户添加成功!!!!!!!\"}'\ncheck_mode = 'check_json'\n\n    @classmethod\n    def assert_result(cls, response: dict, response_code: str, expect_str: str, check_mode: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n    \n        #当接口返回为空时，处理掉\n        if response == None:\n            allure_step(\"当前可用参数池\", cls.extra_pool)\n            logger.info(\n                f'断言结果, 返回值为空,无法断言')\n            allure_step(f'断言结果', f'返回值为空,无法断言')\n            return None\n    \n        if check_mode == 'check_code':\n            allure_step(\"当前可用参数池\", cls.extra_pool)\n            logger.info(\n                f'断言结果, 实际结果:{response_code} | 预期结果:{expect_str} \\n断言结果 {int(expect_str) == int(response_code)}')\n            allure_step(f'断言结果',f'实际结果状态码:{response_code} = 预期结果状态码:{expect_str}')\n            try:\n                assert int(expect_str) == int(response_code)\n            except AssertionError:\n                raise AssertionError(\n                    f'断言失败 -|- 实际结果:{expect_str} || 预期结果: {response_code}')\n        else:\n            # 后置sql变量转换\n            allure_step(\"当前可用参数池\", cls.extra_pool)\n            expect_str = rep_expr(expect_str, cls.extra_pool)\n            expect_dict = convert_json(expect_str)\n            index = 0\n            for k, v in expect_dict.items():\n                # 获取需要断言的实际结果部分\n                actual = extractor(response, k)\n                index += 1\n                logger.info(\n                    f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n                allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}')\n                try:\n>                   assert actual == v\nE                   AssertionError\n\ntools\\data_process.py:155: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['c3', '添加用户', '{\"Authorization\": \"${token}\"}', 'userMgr/users', 'post', 'json', ...]\n\n    @pytest.mark.flaky(reruns=None, reruns_delay=1) #pytest 失败重跑装饰器\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n        response, response_code, expect, sql, check_mode = BaseRequest.send_request(cases, env = 'dev')\n        # 断言操作\n>       DataProcess.assert_result(response, response_code, expect, check_mode)\n\ntest\\test_api.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'code': '500', 'data': None, 'message': 'JSON parse error: Cannot deserialize instance of `[Ljava.lang.Integer;` out ...ce: (PushbackInputStream); line: 1, column: 60] (through reference chain: cn.ghostcloud.admins.vo.UserReq[\"roleIds\"])'}\nresponse_code = 200, expect_str = '{\"$.data\":\"用户添加成功!!!!!!!\"}'\ncheck_mode = 'check_json'\n\n    @classmethod\n    def assert_result(cls, response: dict, response_code: str, expect_str: str, check_mode: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n    \n        #当接口返回为空时，处理掉\n        if response == None:\n            allure_step(\"当前可用参数池\", cls.extra_pool)\n            logger.info(\n                f'断言结果, 返回值为空,无法断言')\n            allure_step(f'断言结果', f'返回值为空,无法断言')\n            return None\n    \n        if check_mode == 'check_code':\n            allure_step(\"当前可用参数池\", cls.extra_pool)\n            logger.info(\n                f'断言结果, 实际结果:{response_code} | 预期结果:{expect_str} \\n断言结果 {int(expect_str) == int(response_code)}')\n            allure_step(f'断言结果',f'实际结果状态码:{response_code} = 预期结果状态码:{expect_str}')\n            try:\n                assert int(expect_str) == int(response_code)\n            except AssertionError:\n                raise AssertionError(\n                    f'断言失败 -|- 实际结果:{expect_str} || 预期结果: {response_code}')\n        else:\n            # 后置sql变量转换\n            allure_step(\"当前可用参数池\", cls.extra_pool)\n            expect_str = rep_expr(expect_str, cls.extra_pool)\n            expect_dict = convert_json(expect_str)\n            index = 0\n            for k, v in expect_dict.items():\n                # 获取需要断言的实际结果部分\n                actual = extractor(response, k)\n                index += 1\n                logger.info(\n                    f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n                allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}')\n                try:\n                    assert actual == v\n                except AssertionError:\n>                   raise AssertionError(\n                        f'第{index}个断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE                   AssertionError: 第1个断言失败 -|- 实际结果:None || 预期结果: 用户添加成功!!!!!!!\n\ntools\\data_process.py:157: AssertionError"}, "steps": [{"name": "请求地址: http://172.16.8.251:81/api/userMgr/users", "status": "passed", "start": 1642995295617, "stop": 1642995295617}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "7dd04491-9c8f-4845-8538-742dd682c920-attachment.json", "type": "application/json"}], "start": 1642995295617, "stop": 1642995295618}, {"name": "请求数据", "status": "passed", "attachments": [{"name": "请求数据", "source": "90d29399-8c6c-4d81-967a-62ca3edd3f52-attachment.json", "type": "application/json"}], "start": 1642995295618, "stop": 1642995295618}, {"name": "响应耗时(s): 0.005551", "status": "passed", "start": 1642995295625, "stop": 1642995295625}, {"name": "响应结果", "status": "passed", "attachments": [{"name": "响应结果", "source": "1f080bfd-67c8-4b61-bd1f-d41ef7095863-attachment.json", "type": "application/json"}], "start": 1642995295625, "stop": 1642995295625}, {"name": "当前可用参数池", "status": "passed", "attachments": [{"name": "当前可用参数池", "source": "1739a7a3-1a83-4f46-9bd1-bdd5730b65f3-attachment.json", "type": "application/json"}], "start": 1642995295625, "stop": 1642995295625}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "47c07101-f74a-4b46-8ecb-1bc26cf889c6-attachment.json", "type": "application/json"}], "start": 1642995295626, "stop": 1642995295626}], "parameters": [{"name": "cases", "value": "['c3', '添加用户', '{\"Authorization\": \"${token}\"}', 'userMgr/users', 'post', 'json', '', 'check_json', '{\"username\":\"new_admin\",\"password\":\"123456\",\"roleIds\":\"[${roleId}]\"}', '', '', '{\"$.data\":\"用户添加成功!!!!!!!\"}']"}], "start": 1642995295617, "stop": 1642995295626, "uuid": "602cc11f-66c1-4240-8465-6884c2e01889", "historyId": "3a098e261ee7b9115a8be890393002aa", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=None, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "DESKTOP-BNVFIE4"}, {"name": "thread", "value": "24148-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}