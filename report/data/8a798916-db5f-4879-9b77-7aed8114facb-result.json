{"name": "角色查询", "status": "broken", "statusDetails": {"message": "NameError: name 'current' is not defined", "trace": "dict_str = '{current:1,pageSize:100}'\n\n    def convert_json(dict_str: str) -> dict:\n        \"\"\"\n        :param dict_str: 长得像字典的字符串\n        return json格式的内容\n        \"\"\"\n        try:\n            if 'None' in dict_str:\n                dict_str = dict_str.replace('None', 'null')\n            elif 'True' in dict_str:\n                dict_str = dict_str.replace('True', 'true')\n            elif 'False' in dict_str:\n                dict_str = dict_str.replace('False', 'false')\n>           dict_str = json.loads(dict_str)\n\ntools\\__init__.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = '{current:1,pageSize:100}', cls = None, object_hook = None\nparse_float = None, parse_int = None, parse_constant = None\nobject_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\nE:\\python3.9.6\\lib\\json\\__init__.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000017676D8E760>\ns = '{current:1,pageSize:100}'\n_w = <built-in method match of re.Pattern object at 0x0000017676D6A3F0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\nE:\\python3.9.6\\lib\\json\\decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000017676D8E760>\ns = '{current:1,pageSize:100}', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)\n\nE:\\python3.9.6\\lib\\json\\decoder.py:353: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['c12', '角色查询', '{\"Authorization\": \"${token}\"}', 'userMgr/roles', 'get', 'json', ...]\n\n    @pytest.mark.flaky(reruns=None, reruns_delay=1) #pytest 失败重跑装饰器\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n>       response, response_code, expect, sql, check_mode = BaseRequest.send_request(cases, env = 'dev')\n\ntest\\test_api.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\napi\\base_requests.py:45: in send_request\n    data = DataProcess.handle_data(data)\ntools\\data_process.py:73: in handle_data\n    variable = convert_json(data)\ntools\\__init__.py:84: in convert_json\n    dict_str = eval(dict_str)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n>   ???\nE   NameError: name 'current' is not defined\n\n<string>:1: NameError"}, "steps": [{"name": "请求地址: http://172.16.8.251:81/api/userMgr/roles", "status": "passed", "start": 1643081245424, "stop": 1643081245424}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "f590fa8a-8c49-4413-8a1b-8f688fb1ba61-attachment.json", "type": "application/json"}], "start": 1643081245424, "stop": 1643081245424}], "parameters": [{"name": "cases", "value": "['c12', '角色查询', '{\"Authorization\": \"${token}\"}', 'userMgr/roles', 'get', 'json', '', 'check_code', '{current:1,pageSize:100}', '', '', 200.0]"}], "start": 1643081245424, "stop": 1643081245425, "uuid": "e39866f1-83ff-4f86-8a9b-bc67042bb4ac", "historyId": "5a1a59aa4470006c7c58a5ba625a4478", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=None, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "DESKTOP-BNVFIE4"}, {"name": "thread", "value": "16420-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}