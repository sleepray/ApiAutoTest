{"name": "链路查询", "status": "failed", "statusDetails": {"message": "AssertionError: 第1个断言失败 -|- 实际结果:303 || 预期结果: 0", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'code': 303, 'data': None, 'msg': 'token错误'}, response_code = 401\nexpect_str = '{\"$.code\": 0}', check_mode = ''\n\n    @classmethod\n    def assert_result(cls, response: dict, response_code: str, expect_str: str, check_mode: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n    \n        #当接口返回为空时，处理掉\n        if response == None:\n            return 1\n    \n        if check_mode == 'check_code':\n            logger.info(\n                f'实际结果:{response_code} | 预期结果:{expect_str} \\n断言结果 {int(expect_str) == int(response_code)}')\n            allure_step(f'实际结果:{response_code} = 预期结果:{expect_str}')\n            try:\n                assert int(expect_str) == int(response_code)\n            except AssertionError:\n                raise AssertionError(\n                    f'断言失败 -|- 实际结果:{expect_str} || 预期结果: {response_code}')\n        else:\n            # 后置sql变量转换\n            allure_step(\"当前可用参数池\", cls.extra_pool)\n            expect_str = rep_expr(expect_str, cls.extra_pool)\n            expect_dict = convert_json(expect_str)\n            index = 0\n            for k, v in expect_dict.items():\n                # 获取需要断言的实际结果部分\n                actual = extractor(response, k)\n                index += 1\n                logger.info(\n                    f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n                allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}')\n                try:\n>                   assert actual == v\nE                   AssertionError\n\ntools\\data_process.py:151: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['c42', '链路查询', '{\"Authorization\": \"${token}\"}', 'trace/detail', 'get', 'params', ...]\n\n    @pytest.mark.flaky(reruns=None, reruns_delay=1) #pytest 失败重跑装饰器\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n        response, response_code, expect, sql, check_mode = BaseRequest.send_request(cases, env = 'dev')\n        # 断言操作\n>       DataProcess.assert_result(response, response_code, expect, check_mode)\n\ntest\\test_api.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'code': 303, 'data': None, 'msg': 'token错误'}, response_code = 401\nexpect_str = '{\"$.code\": 0}', check_mode = ''\n\n    @classmethod\n    def assert_result(cls, response: dict, response_code: str, expect_str: str, check_mode: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n    \n        #当接口返回为空时，处理掉\n        if response == None:\n            return 1\n    \n        if check_mode == 'check_code':\n            logger.info(\n                f'实际结果:{response_code} | 预期结果:{expect_str} \\n断言结果 {int(expect_str) == int(response_code)}')\n            allure_step(f'实际结果:{response_code} = 预期结果:{expect_str}')\n            try:\n                assert int(expect_str) == int(response_code)\n            except AssertionError:\n                raise AssertionError(\n                    f'断言失败 -|- 实际结果:{expect_str} || 预期结果: {response_code}')\n        else:\n            # 后置sql变量转换\n            allure_step(\"当前可用参数池\", cls.extra_pool)\n            expect_str = rep_expr(expect_str, cls.extra_pool)\n            expect_dict = convert_json(expect_str)\n            index = 0\n            for k, v in expect_dict.items():\n                # 获取需要断言的实际结果部分\n                actual = extractor(response, k)\n                index += 1\n                logger.info(\n                    f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n                allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}')\n                try:\n                    assert actual == v\n                except AssertionError:\n>                   raise AssertionError(\n                        f'第{index}个断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE                   AssertionError: 第1个断言失败 -|- 实际结果:303 || 预期结果: 0\n\ntools\\data_process.py:153: AssertionError"}, "steps": [{"name": "请求地址: http://192.168.5.120:8080/backend/trace/detail", "status": "passed", "start": 1642130475816, "stop": 1642130475816}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "690ae3dd-2acc-4778-9ea7-52d3e9cbe4a7-attachment.json", "type": "application/json"}], "start": 1642130475816, "stop": 1642130475816}, {"name": "请求数据", "status": "passed", "attachments": [{"name": "请求数据", "source": "9295f6c7-c186-42a0-b83e-86282a3e42ed-attachment.json", "type": "application/json"}], "start": 1642130475817, "stop": 1642130475817}, {"name": "响应耗时(s): 0.001073", "status": "passed", "start": 1642130475819, "stop": 1642130475819}, {"name": "响应结果", "status": "passed", "attachments": [{"name": "响应结果", "source": "d515dc9f-0522-4ac1-bda7-40e069456f25-attachment.json", "type": "application/json"}], "start": 1642130475819, "stop": 1642130475820}, {"name": "当前可用参数池", "status": "passed", "attachments": [{"name": "当前可用参数池", "source": "2872b6fd-08d5-4884-90c8-94c4f5dd175f-attachment.json", "type": "application/json"}], "start": 1642130475820, "stop": 1642130475820}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "2ca692e1-b027-4739-a36b-e1e3516fef34-attachment.json", "type": "application/json"}], "start": 1642130475820, "stop": 1642130475820}], "attachments": [{"name": "stderr", "source": "41cc617b-5dfa-4551-8492-c707b7a14d3e-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "cases", "value": "['c42', '链路查询', '{\"Authorization\": \"${token}\"}', 'trace/detail', 'get', 'params', '', '', '{\"traceId\":\"${traceId1}\"}', '', '', '{\"$.code\": 0}']"}], "start": 1642130475815, "stop": 1642130475821, "uuid": "f2c218ad-c83b-4533-82e8-53fb4e6be041", "historyId": "d8cdca443376e97fe60948f4c2192503", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=None, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "DESKTOP-BNVFIE4"}, {"name": "thread", "value": "14132-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}