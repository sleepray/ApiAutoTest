{"name": "post请求实现登录", "status": "broken", "statusDetails": {"message": "ValueError: invalid literal for int() with base 10: '{\"$.code\":0}'", "trace": "cases = ['c1', 'post请求实现登录', '', 'user/login', 'post', 'json', ...]\n\n    @pytest.mark.flaky(reruns=None, reruns_delay=1) #pytest 失败重跑装饰器\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n        response, response_code, expect, sql, check_mode = BaseRequest.send_request(cases, env = 'dev')\n        # 断言操作\n>       DataProcess.assert_result(response, response_code, expect, check_mode)\n\ntest\\test_api.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'code': 0, 'data': 'DPn3ZB1AcUi6az/GMSrY1QbIbtTcIcILwzbKDj9tmbU=', 'msg': ''}\nresponse_code = 200, expect_str = '{\"$.code\":0}', check_mode = 'check_code'\n\n    @classmethod\n    def assert_result(cls, response: dict, response_code: str, expect_str: str, check_mode: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n    \n        #当接口返回为空时，处理掉\n        if response == None:\n            return 1\n    \n        if check_mode == 'check_code':\n            logger.info(\n>               f'断言结果', f'实际结果:{response_code} | 预期结果:{expect_str} \\n断言结果 {int(expect_str) == int(response_code)}')\nE           ValueError: invalid literal for int() with base 10: '{\"$.code\":0}'\n\ntools\\data_process.py:129: ValueError"}, "steps": [{"name": "请求地址: http://192.168.5.120:8080/backend/user/login", "status": "passed", "start": 1642130676693, "stop": 1642130676693}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "e840699b-362e-4e72-85d6-4aa07f6cd699-attachment.json", "type": "application/json"}], "start": 1642130676694, "stop": 1642130676694}, {"name": "请求数据", "status": "passed", "attachments": [{"name": "请求数据", "source": "9b90b43e-08e1-4204-9220-46cc3718597d-attachment.json", "type": "application/json"}], "start": 1642130676695, "stop": 1642130676696}, {"name": "响应耗时(s): 0.004275", "status": "passed", "start": 1642130676702, "stop": 1642130676702}, {"name": "响应结果", "status": "passed", "attachments": [{"name": "响应结果", "source": "7519bbe5-fa67-4930-a43f-fc2c31f403fd-attachment.json", "type": "application/json"}], "start": 1642130676702, "stop": 1642130676703}], "attachments": [{"name": "stderr", "source": "1ce8148b-144a-4c93-bccf-356c8eeaf810-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "cases", "value": "['c1', 'post请求实现登录', '', 'user/login', 'post', 'json', '', 'check_code', '{\"username\": \"admin\", \"password\": \"password\"}', '{\"token\": \"$.data\"}', 'select * from apis; select * from cases', '{\"$.code\":0}']"}], "start": 1642130676693, "stop": 1642130676704, "uuid": "428a8f2f-5708-4eac-92cf-a6d4e534a702", "historyId": "8174f8ecb1004db16679a852ff5f760a", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=None, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "DESKTOP-BNVFIE4"}, {"name": "thread", "value": "15972-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}